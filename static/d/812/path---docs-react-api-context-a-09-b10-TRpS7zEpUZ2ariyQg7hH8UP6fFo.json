{"data":{"markdownRemark":{"fields":{"slug":"/docs/React/ApiContext"},"id":"96bfc2a2-3f1c-53a5-bd03-99857d09f8dc","html":"<h1 align=\"center\">\n  API context\n</h1>\n<p>source : <a href=\"https://putaindecode.io/fr/articles/js/react/react-new-context-api/\">https://putaindecode.io/fr/articles/js/react/react-new-context-api/</a></p>\n<h1 id=\"api-context\"><a href=\"#api-context\" aria-label=\"api context permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API context</h1>\n<p>Depuis la version 16.3, l'Api context de react est devenue viable, plus facile à uiliser avec une syntaxe assouplie et simplifiée.</p>\n<h3 id=\"a-quoi-ça-sert-\"><a href=\"#a-quoi-%C3%A7a-sert-\" aria-label=\"a quoi ça sert  permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A quoi ça sert ?</h3>\n<p>A l'instar de redux, Api contexxt permet de rendre disponible des propriétés au sein de ses composants React sans avoir à les passer directement à ces derniers.\nAvec API Context, on peut facilement créer un ou plusieurs stores pour nos données.</p>\n<h2 id=\"exemple-dutilsation\"><a href=\"#exemple-dutilsation\" aria-label=\"exemple dutilsation permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemple d'utilsation</h2>\n<pre><code class=\"language-Javascript\">// store/UserProvider.js\n\n// on importe createContext qui servira à la création d'un ou plusieurs contextes\nimport React, { createContext, Component } from \"react\"; \n\n/**\n * `createContext` contient 2 propriétés :\n * `Provider` et `Consumer`. Nous les rendons accessibles\n * via la constante `UserContext` et on initialise une\n * propriété par défaut \"name\" qui sera une chaîne vide.\n * On exporte ce contexte afin qu'il soit exploitable par\n * d'autres composants par la suite via le `Consumer`\n */\nexport const UserContext = createContext({\n  name: \"\",\n});\n\n/**\n * la classe UserProvider fera office de... Provider (!)\n * en englobant son enfant direct\n * dans le composant éponyme. De cette façon, ses values\n * seront accessibles de manière globale via le `Consumer`\n */\nclass UserProvider extends Component {\n  state = {\n    name: \"Putain de Code\", // une valeur de départ\n  };\n\n  render() {\n    return (\n      /**\n       * la propriété value est très importante ici, elle rend\n       * le contenu du state disponible aux `Consumers` de l'application\n       */\n      &#x3C;UserContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/UserContext.Provider>\n    );\n  }\n}\n\nexport default UserProvider;\n</code></pre>\n<pre><code class=\"language-Javascript\">// app.js\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport Hello from \"./Hello\";\n\n// On importe la classe `UserProvider`\nimport UserProvider from \"./store/UserProvider\";\n\nconst styles = {\n  fontFamily: \"sans-serif\",\n  textAlign: \"center\",\n};\n\nconst App = () => (\n  &#x3C;div style={styles}>\n    {/* A noter qu'aucune propriété n'est passée au composant `Hello` */}\n    &#x3C;Hello />\n  &#x3C;/div>\n);\n\nrender(\n  /**\n   * On pourrait tout à fait n'englober que les composants qui\n   * nous intéressent, mais pour l'exemple, nous englobons le bootstrap\n   * de notre app dans notre `UserProvider`\n   */\n  &#x3C;UserProvider>\n    &#x3C;App />\n  &#x3C;/UserProvider>,\n  document.getElementById(\"root\"),\n);\n</code></pre>\n<pre><code class=\"language-Javascript\">// Hello.js\nimport React from \"react\";\n/**\n * On importe cette fois non pas le UserProvider,\n * mais le contexte afin d'accéder au `Consumer`\n */\nimport { UserContext } from \"./store/UserProvider\";\n\n/**\n * Le Consumer expose le contenu de la propriété `value`\n * du Provider\n */\nexport default () => (\n  &#x3C;UserContext.Consumer>\n    {value => &#x3C;h1>Hello {value.name}!&#x3C;/h1>}\n  &#x3C;/UserContext.Consumer>\n);\n</code></pre>","frontmatter":{"date":null,"title":"API context","root":"/docs"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}