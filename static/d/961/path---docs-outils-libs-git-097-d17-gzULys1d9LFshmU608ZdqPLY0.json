{"data":{"markdownRemark":{"fields":{"slug":"/docs/outils-libs/git"},"id":"b388cec4-908f-5e16-a2d0-ac61fbdfd169","html":"<h1>\n  Git\n</h1>\n<h2 id=\"configuration\"><a href=\"#configuration\" aria-label=\"configuration permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration</h2>\n<p>Configurer les informations utilisateur pour tous les repos locaux</p>\n<p><code>git config --global user.name \"[name]\"</code><br>\nDéfinit le nom que vous souhaitez attacher à vos commits</p>\n<p><code>git config --global user.email \"[email address]\"</code><br></p>\n<p><code>git config --global color.ui auto</code><br>\nPermet une coloration des lignes de commandes en sortie</p>\n<h2 id=\"créer-des-répertoires\"><a href=\"#cr%C3%A9er-des-r%C3%A9pertoires\" aria-label=\"créer des répertoires permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Créer des répertoires</h2>\n<p>Démarrer un nouveau repo ou en obtenir un à partir d'une URL existante</p>\n<p><code>git init [project-name]</code><br>\nCrée un nouveau repo local avec le nom spécifié</p>\n<p><code>git clone [url]</code><br>\nTélécharge un projet et son historique de version</p>\n<h2 id=\"ajout-de-fichiers-et-commit\"><a href=\"#ajout-de-fichiers-et-commit\" aria-label=\"ajout de fichiers et commit permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ajout de fichiers et commit</h2>\n<p><code>git status</code><br>\nRépertorie tous les nouveaux fichiers ou modifiés à être validés</p>\n<p><code>git diff</code><br>\nAffiche les différences entre les fichiers qui n'ont pas encore été stage (avant git add .) et les fichiers du dernier commit</p>\n<p><code>git add [file]</code><br>\nMise en zone de staging. Prepare les fichiers pour le versionning</p>\n<p><code>git diff --staged</code><br>\nAffiche les différences entre les fichiers dans la zone de staging et les fichiers du dernier commit</p>\n<p><code>git diff-tree --no-commit-id --name-only -r <commit></code><br>\nLister tous les fichiers concernés par un commit</p>\n<p><code>git reset [file]</code><br>\nEnlève le fichier de la zone de staging en gardant les modifications apportées au fichier</p>\n<p><code>git commit -m \"[descriptive message]\"</code><br>\nEnregistre les fichiers de la zone de staging dans l'historique de versionning</p>\n<h2 id=\"branches\"><a href=\"#branches\" aria-label=\"branches permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Branches</h2>\n<p><code>git branch</code><br>\nListe toutes les branches locales du repo courant</p>\n<p><code>git branch [branch-name]</code><br>\nCrée une nouvelle branche</p>\n<p><code>git branch --contains <commit></code><br>\nLister les branches qui contiennent un commit en particulier</p>\n<p><code>git checkout [branch-name]</code><br>\nSe déplacer sur une branch</p>\n<p><code>git checkout -b [branch-name]</code><br>\nCrée la branche et se positionne dessus</p>\n<p><code>git merge [branch]</code><br>\nCombine l'historique de la branche spécifiée dans la branche courante</p>\n<p><code>git branch -d [branch-name]</code><br>\nSupprimer une branche</p>\n<h2 id=\"déplacer-et-supprimer-des-fichiers-versionnés\"><a href=\"#d%C3%A9placer-et-supprimer-des-fichiers-versionn%C3%A9s\" aria-label=\"déplacer et supprimer des fichiers versionnés permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Déplacer et supprimer des fichiers versionnés</h2>\n<p><code>git rm [file]</code><br>\nSupprime le fichier du répertoire de travail et envoye dans la zone de staging le fichier supprimer</p>\n<p><code>git mv [file-original][file-renamed]</code><br>\nModifie le nom du fichier et le prépare pour le commit (zone de staging)</p>\n<h2 id=\"voir-lhistorique\"><a href=\"#voir-lhistorique\" aria-label=\"voir lhistorique permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Voir l'historique</h2>\n<p><code>git log</code><br>\nListe l'historique des versions de la branche courante</p>\n<p><code>git log --follow [file]</code><br>\nListe l'historique de version pour un fichier spécifique, y compris les fichiers renommés</p>\n<p><code>git log master..[branch-name]</code><br>\nListe uniquement les commit de [branch-name] même si on merge master sur [branch-name]</p>\n<p><code>git diff [first-branch]...[second-branch]</code><br>\nAffiche les différences de contenu entre deux branches</p>\n<p><code>git show [commit]</code><br>\nAffiche les métadonnées et les changements de contenu pour le commit spécifié</p>\n<h2 id=\"ignorer-les-fichiers\"><a href=\"#ignorer-les-fichiers\" aria-label=\"ignorer les fichiers permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ignorer les fichiers</h2>\n<p>Exclure les fichiers temporaires et les chemins d'accès</p>\n<pre><code>*.log\nbuild/\ntemp-*\n</code></pre>\n<p>Un fichier nommé .gitignore permet d'ignorer certains fichiers/dossiers de l'historique de versions</p>\n<p><code>git ls-files --other --ignored --exclude-standard</code><br>\nListe tous les fichiers ignorés dans ce projet</p>\n<h2 id=\"rétablir-un-commit\"><a href=\"#r%C3%A9tablir-un-commit\" aria-label=\"rétablir un commit permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rétablir un commit</h2>\n<p><code>git reset [commit]</code><br>\nDéfait tous les commits après le commit spécifié et garde les modifications localement</p>\n<p><code>git reset --hard [commit]</code><br>\nDéfait tous les commits après le commit spécifié et et supprime le modification locale.\nPermet de revenir à la version du code au moment du commit spécifié</p>\n<p><code>git reflog</code><br>\nRevenir sur certaines commandes trop impulsives (comme un reset ou un rebase)</p>\n<h2 id=\"stash\"><a href=\"#stash\" aria-label=\"stash permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stash</h2>\n<p>Mettre de côté ou restaurer des modifications incomplètes</p>\n<p><code>git stash</code><br>\nStocke temporairement tous les fichiers modifiés mais pas encore en zone de staging</p>\n<p><code>git stash pop</code><br>\nRestaure les fichiers qui ont été stash</p>\n<p><code>git stash list</code><br>\nListe tous les fichiers en zone de stash</p>\n<h2 id=\"synchroniser-les-modifications\"><a href=\"#synchroniser-les-modifications\" aria-label=\"synchroniser les modifications permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Synchroniser les modifications</h2>\n<p><code>git fetch [bookmark]</code><br>\nTélécharge tout l'historique du repo bookmark</p>\n<p><code>git merge [bookmark]</code><br>\nFusionne la branche bookmark avec la branche courante (Se positionner sur la branche sur laquelle on veut faire la fusion)</p>\n<p><code>git push [alias][branch]</code><br>\nUpload tous les commits </p>\n<p><code>git pull</code><br>\nTélécharge tous les commits</p>\n<h2 id=\"rebase-interactif\"><a href=\"#rebase-interactif\" aria-label=\"rebase interactif permalink\" class=\"post-toc-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rebase interactif</h2>\n<p>Le rebase interactif permet de retravailler son historique avant de merge<br></p>\n<p><code>git rebase -i [code commit]</code><br></p>\n<p><code>pick</code> => utiliser le commit<br>\n<code>reword</code> => renommer un commit<br>\n<code>squash</code> => permet de fusionner le commit avec le commit précédent <br>\n<code>fixup</code> => peremt de fusionner le commit avec le commit précédent mais supprime le log message<br>\n<code>drop</code> => supprime un commit<br></p>\n<p><code>git rebase --abort</code><br>\nPermet de quitter le mode rebase </p>","frontmatter":{"date":null,"title":"Git","root":"/docs"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}