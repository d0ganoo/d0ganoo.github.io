{"data":{"markdownRemark":{"fields":{"slug":"/docs/Redux/MobXvsRedux"},"id":"16bd0dc3-3034-52ba-8591-dbc09a8902f8","html":"<h1 align=\"center\">\n  MobX vs Redux\n</h1>\n<p>Source : <a href=\"https://www.youtube.com/watch?v=khYesU0jTtI\">https://www.youtube.com/watch?v=khYesU0jTtI</a>  <strong>Grafikart</strong></p>\n<p>Mobx est basé sur la notion d'écouteur/observeur de class.</p>\n<pre><code class=\"language-Javascript\">import mobx from 'mobx';\n\nclass Tchat{\n  constructor(){\n    mobx.extendObservable(this, {\n      messages:[],\n      notifications:0;\n    });\n  }\n}\n\nlet tchat = new Tchat();\nmobx.autorun(function(){\n  console.log('Voici la liste des messages : ', tchat.messages.join(', '));\n});\n\nglobal.tchat = tchat;\ntchat.messages.push('Mon nouveau message'); // Mutation à l'arrache / déconseillé\n</code></pre>\n<p>Syntaxe différente mais un code qui fait exactement la même chose:</p>\n<pre><code class=\"language-Javascript\">import mobx, {observable, action} from 'mobx';\n\nmobx.useStrict(true); // Empêche les mutation à l'arache (oblige l'utilisation des actions)\n\nclass Tchat{\n  @observable messages = [];\n  @observabble notifications = 0;\n  \n  @action addMessage(message){\n    this.messages.push(message);\n  }\n}\n\nlet tchat = new Tchat();\nmobx.autorun(function(){\n  console.log('Voici la liste des messages : ', tchat.messages.join(', '));\n});\n\nglobal.tchat = tchat;\ntchat.addMessage('Mon nouveau message');\n</code></pre>\n<p>Dans cet exemple, on voit que mobx observe le tableau de message par le biais de <strong>extenObservable</strong> et detecte un changement grâce à <strong>autorun</strong>  ou observe (fonction qui permet d'observer les variables de l'object du constructeur de la classe): c'est la magie de mobx.</p>\n<p>autorun est intelligent, il se déclenche seulement sur la propriété modifiée et non pas sur tout l'objet (state) de extendObservable.</p>\n<p>Conclusion:</p>\n<p>Ce sont 2 générateurs de state avec une appoche différente du problème:</p>\n<p>Mobx: l'approche est la moins contraingnate au niveau du fonctionnement. (La state peut garder la structure objet classique + greffe du système d'observable pour détecter les modifications mais magie noir mobx :p) Facile à utiliser avec react et angular Js (Avec vue, vaut mieux utiliser VueX)</p>\n<p>Redux: Approche inspriré de la programmation fonctionnel. + testable avec moins d'effet de bord. Pas de mutation de la state.\nProblème concernant l'architecture de la state: Obligation de normaliser la state. Ne pas avoir d'objet trop imbriqué</p>","frontmatter":{"date":null,"title":"MobX vs Redux","root":"/docs"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}